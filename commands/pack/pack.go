// Copyright (c) 2020 rookie-ninja
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file.
package rk_pack

import (
	"fmt"
	"github.com/fatih/color"
	rk_build "github.com/rookie-ninja/rk/commands/build"
	"github.com/rookie-ninja/rk/common"
	"github.com/urfave/cli/v2"
	"os/exec"
	"path"
)

type packInfo struct {
	Debug bool
}

var PackInfo = packInfo{}

func Pack() *cli.Command {
	command := &cli.Command{
		Name:      "pack",
		Usage:     "pack target folder generated by rk build",
		UsageText: "rk pack",
		Flags: []cli.Flag{
			&cli.BoolFlag{
				Name:        "debug",
				Aliases:     []string{"d"},
				Usage:       "debug mod",
				Destination: &PackInfo.Debug,
			},
		},
		Action: PackAction,
	}

	return command
}

func PackAction(ctx *cli.Context) error {
	event := rk_common.GetEvent("pack")

	// 1: build project first
	event.StartTimer("build")
	if err := rk_build.BuildAction(ctx); err != nil {
		event.AddPair("build", "fail")
		event.AddErr(err)
		event.EndTimer("build")
		return rk_common.Error(event, err)
	}
	event.EndTimer("build")

	// 2: read build.yaml file
	config := &rk_common.BootConfig{}
	if err := rk_common.MarshalBuildConfig("build.yaml", config, event); err != nil {
		event.AddPair("marshal-config", "fail")
		return rk_common.Error(event, err)
	}

	// 3: pack it to tar.gz style
	if len(config.Pack.Name) < 1 {
		config.Pack.Name = "target.tar.gz"
	} else if len(path.Ext(config.Pack.Name)) < 1 {
		config.Pack.Name = config.Pack.Name + ".tar.gz"
	}

	color.Cyan("[Action] packing target folder")
	bytes, err := exec.Command("tar", "-cvzf", config.Pack.Name, "target").CombinedOutput()
	if err != nil {
		rk_common.ClearTargetFolder("target", event)
		return rk_common.Error(event,
			rk_common.NewScriptError(
				fmt.Sprintf("failed to compress target folder \n[err] %v \n[stderr] %v", err, string(bytes))))
	}

	rk_common.Success()
	event.AddPair("pack", "success")

	rk_common.Finish(event, nil)
	return nil
}
